#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const http = require('http');
const { URL } = require('url');
const childProcess = require('child_process');

function printHelp() {
  const message = `docsify 0.0.0-local\n\n` +
    `用法：\n  docsify serve [dir] [-p <port>] [--host <host>] [--open]\n\n` +
    `参数：\n  dir          要预览的目录，默认为当前目录\n  -p, --port   指定监听端口（默认 3000）\n  --host       指定监听地址（默认 0.0.0.0）\n  -o, --open   服务启动后自动在浏览器中打开页面\n  -h, --help   显示本帮助信息\n`;
  console.log(message);
}

function openBrowser(url) {
  const platform = process.platform;
  let command;
  if (platform === 'darwin') {
    command = 'open';
  } else if (platform === 'win32') {
    command = 'cmd';
  } else {
    command = 'xdg-open';
  }

  if (command === 'cmd') {
    childProcess.spawn(command, ['/c', 'start', '', url], { stdio: 'ignore' });
    return;
  }
  const child = childProcess.spawn(command, [url], { stdio: 'ignore' });
  child.on('error', () => {
    console.warn('无法自动打开浏览器，请手动访问：', url);
  });
}

function createMimeMap() {
  return {
    '.html': 'text/html; charset=utf-8',
    '.htm': 'text/html; charset=utf-8',
    '.js': 'application/javascript; charset=utf-8',
    '.mjs': 'application/javascript; charset=utf-8',
    '.css': 'text/css; charset=utf-8',
    '.json': 'application/json; charset=utf-8',
    '.png': 'image/png',
    '.jpg': 'image/jpeg',
    '.jpeg': 'image/jpeg',
    '.gif': 'image/gif',
    '.svg': 'image/svg+xml',
    '.ico': 'image/x-icon',
    '.txt': 'text/plain; charset=utf-8',
    '.md': 'text/markdown; charset=utf-8',
    '.woff': 'font/woff',
    '.woff2': 'font/woff2',
    '.ttf': 'font/ttf'
  };
}

function resolveFilePath(rootDir, requestPath) {
  const decoded = decodeURIComponent(requestPath);
  let safePath = path.normalize(path.join(rootDir, decoded));
  if (!safePath.startsWith(rootDir)) {
    return null;
  }
  return safePath;
}

function serveIndex(res, rootDir) {
  const indexFile = path.join(rootDir, 'index.html');
  fs.readFile(indexFile, (err, data) => {
    if (err) {
      res.statusCode = 404;
      res.end('404 Not Found');
      return;
    }
    res.setHeader('Content-Type', 'text/html; charset=utf-8');
    res.end(data);
  });
}

function serveFile(res, filePath, mimeMap) {
  const ext = path.extname(filePath).toLowerCase();
  const type = mimeMap[ext] || 'application/octet-stream';
  res.setHeader('Content-Type', type);
  const stream = fs.createReadStream(filePath);
  stream.on('error', () => {
    res.statusCode = 500;
    res.end('500 Internal Server Error');
  });
  stream.pipe(res);
}

function startServer({ rootDir, host, port, open }) {
  const mimeMap = createMimeMap();
  const server = http.createServer((req, res) => {
    if (!req.url) {
      serveIndex(res, rootDir);
      return;
    }
    const requestUrl = new URL(req.url, `http://${req.headers.host || host}`);
    let pathname = requestUrl.pathname;

    const filePath = resolveFilePath(rootDir, pathname);
    if (!filePath) {
      res.statusCode = 403;
      res.end('403 Forbidden');
      return;
    }

    fs.stat(filePath, (error, stats) => {
      if (!error && stats.isFile()) {
        serveFile(res, filePath, mimeMap);
        return;
      }
      if (!error && stats.isDirectory()) {
        const indexCandidate = path.join(filePath, 'index.html');
        fs.stat(indexCandidate, (idxErr, idxStats) => {
          if (!idxErr && idxStats.isFile()) {
            serveFile(res, indexCandidate, mimeMap);
            return;
          }
          serveIndex(res, rootDir);
        });
        return;
      }
      serveIndex(res, rootDir);
    });
  });

  server.listen(port, host, () => {
    const url = `http://${host === '0.0.0.0' ? 'localhost' : host}:${port}`;
    console.log(`Docsify 本地预览已就绪：${url}`);
    if (open) {
      openBrowser(url);
    }
  });

  server.on('error', (err) => {
    console.error('无法启动本地服务：', err.message);
    process.exitCode = 1;
  });
}

function main() {
  const argv = process.argv.slice(2);
  if (argv.length === 0 || argv.includes('-h') || argv.includes('--help')) {
    printHelp();
    process.exit(argv.length ? 0 : 1);
    return;
  }

  const command = argv.shift();
  if (command !== 'serve') {
    console.error('仅支持 "serve" 命令。\n');
    printHelp();
    process.exit(1);
    return;
  }

  let rootDir = process.cwd();
  let port = 3000;
  let host = '0.0.0.0';
  let open = false;
  let rootSpecified = false;

  for (let i = 0; i < argv.length; i += 1) {
    const arg = argv[i];
    if (!arg) {
      continue;
    }
    if (arg === '-p' || arg === '--port') {
      const value = argv[i + 1];
      if (!value) {
        console.error('缺少端口号。');
        process.exit(1);
        return;
      }
      const parsed = parseInt(value, 10);
      if (Number.isNaN(parsed) || parsed <= 0) {
        console.error('端口号无效：', value);
        process.exit(1);
        return;
      }
      port = parsed;
      i += 1;
      continue;
    }
    if (arg === '--host') {
      const value = argv[i + 1];
      if (!value) {
        console.error('缺少主机地址。');
        process.exit(1);
        return;
      }
      host = value;
      i += 1;
      continue;
    }
    if (arg === '-o' || arg === '--open') {
      open = true;
      continue;
    }
    if (!arg.startsWith('-') && !rootSpecified) {
      rootDir = path.resolve(process.cwd(), arg);
      rootSpecified = true;
      continue;
    }

    console.error(`无法识别的参数：${arg}`);
    printHelp();
    process.exit(1);
    return;
  }

  if (!fs.existsSync(rootDir) || !fs.statSync(rootDir).isDirectory()) {
    console.error('指定目录不存在或不是文件夹：', rootDir);
    process.exit(1);
    return;
  }

  startServer({ rootDir, host, port, open });
}

main();
